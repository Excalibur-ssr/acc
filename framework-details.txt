This file describes the framework ACC and other projects of mine are built upon.
It's assumed that you are already a flashable zip and/or Magisk module creator.


Generic Project Structure

_builds/ (local only dir)
  $id-$versionCode/
    $id-$versionCode/tar.gz (for front-end apps)
    $id-$versionCode.zip (flashable)
    install-tarball.sh (copy)

_misc/ (local only dir)
  random_dir/
  random_file

 $id/
  translations/
  aquire-lock.sh (for job control, uses flock)
  default-config.txt
  flash-zips.sh (universal shell-based-zip flasher)
  release-lock.sh
  select.sh ("select" for shells that lack it)
  service.sh (initialization script)
  setup-busybox.sh
  strings.sh (core language strings)
  uninstall.sh

bin/
  $id-uninstaller.zip (generated by build.sh; update-binary is a copy of $id/uninstall.sh)

META-INF/com/google/android/
  update-binary (copy of install.sh)
  updater-script (dummy file)

.gitattributes
.gitignore
build.bat
build.sh
bundle.bat
bundle.sh (copies tarball and install-tarball.sh to front-end-src-code/app/src/main/res/raw/)
check-syntax.bat
check-syntax.sh
customize.sh (copy of install.sh, for Magisk)
framework-details.txt (this file)
install.sh (main installer)
install-online.sh (upgrader, online installer)
install-tarball.sh
License.md
module.prop
README.md
TODO.txt


Tasks Carried Out By build.sh

1. Check shell syntax in all scripts.

2. Update version and versionCode in module.prop (values come from README.md > LATEST CHANGES).

3. Set the correct id and domain (from module.prop) in install*.sh, $id/*.sh and bundle.sh.

4. Patch README.md.

5. Update busybox config (from $id/setup-busybox.sh) in $id/uninstall.sh and install scripts.

6. Unify installers for flashable zip (customize.sh and update-binary are copies of install.sh).

7. Generate flashable zips (main & uninstaller) and tarball.
